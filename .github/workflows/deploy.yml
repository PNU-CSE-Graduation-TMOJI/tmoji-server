name: Deploy to S3 and to ec2

on:
  push:
    branches: ["prod"]

permissions:
  id-token: write # OIDC
  contents: read

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make artifact (zip)
        run: |
          mkdir -p dist
          # 배포에 필요한 파일만 압축: docker-compose들, app 코드, deploy/nginx.conf, etc.
          zip -r dist/app.zip \
            app docker-compose.yml docker-compose.prod.yml \
            deploy pyproject.toml poetry.lock \
            Dockerfile alembic alembic.ini font README.md \
            --exclude "**/__pycache__/**" ".git/**" ".github/**" "certbot/**"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE_NAME }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: |
          TS=$(date +%Y%m%d-%H%M%S)
          aws s3 cp dist/app.zip s3://${{ secrets.S3_BUCKET_NAME }}/app-$TS.zip
          # 최신심볼릭 역할: latest.zip 덮어쓰기
          aws s3 cp dist/app.zip s3://${{ secrets.S3_BUCKET_NAME }}/latest.zip

  run_on_ec2:
    needs: build_and_upload
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE_NAME }}
          aws-region: ap-northeast-2

      - name: Put .env into SSM Parameter Store
        env:
          ENV_PROD: ${{ secrets.ENV_PROD }}
        run: |
          aws ssm put-parameter \
            --name "/fastapi/env_prod" \
            --type "SecureString" \
            --value "$ENV_PROD" \
            --overwrite

      - name: Put gcloud secret into SSM Parameter Store
        env:
          GCLOUD_SECRET: ${{ secrets.GCLOUD_SECRET }}
        run: |
          aws ssm put-parameter \
            --name "/fastapi/gcloud_sa_json" \
            --type "SecureString" \
            --value "$GCLOUD_SECRET" \
            --overwrite

      - name: Put gpu secret into SSM Parameter Store
        env:
          GPU_SSH_KEY: ${{ secrets.GPU_SSH_KEY }}
          GPU_SSH_PUB: ${{ secrets.GPU_SSH_PUB }}
        run: |
          aws ssm put-parameter \
            --name "/fastapi/gpu_ssh_key" \
            --type "SecureString" \
            --value "$GPU_SSH_KEY" \
            --overwrite

          aws ssm put-parameter \
            --name "/fastapi/gpu_ssh_pub" \
            --type "SecureString" \
            --value "$GPU_SSH_PUB" \
            --overwrite

      - name: Trigger SSM RunCommand on EC2
        run: |
          INSTANCE_ID="${{ secrets.EC2_INSTANCE_ID }}"
          S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          GPU_ID="${{ secrets.GPU_ID }}"

          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy fastapi via S3 artifact" \
            --cloud-watch-output-config "CloudWatchOutputEnabled=true,CloudWatchLogGroupName=/aws/ssm/tmoji-deploy" \
            --parameters '{
              "commands": [
                "set -euo pipefail",
                "APP_DIR=/opt/fastapi-app",
                "TMP_DIR=/opt/fastapi-app_tmp",
                "GPU_ID='"$GPU_ID"'",
                "mkdir -p $APP_DIR $TMP_DIR $APP_DIR/certbot/conf $APP_DIR/certbot/www",
                "cd $APP_DIR",

                "echo \"[1/8] Download artifact\"",
                "command -v unzip >/dev/null 2>&1 || sudo yum install -y unzip || sudo apt-get update && sudo apt-get install -y unzip || true",
                "aws s3 cp s3://'"$S3_BUCKET_NAME"'/latest.zip /tmp/app.zip",
                "rm -rf $TMP_DIR/*",
                "unzip -o /tmp/app.zip -d $TMP_DIR",

                "echo \"[2/8] Preserve certbot dirs (by excluding)\"",
                "command -v rsync >/dev/null 2>&1 || sudo yum install -y rsync || sudo apt-get install -y rsync -y || true",
                "if command -v rsync >/dev/null 2>&1; then rsync -a --delete --exclude certbot $TMP_DIR/ $APP_DIR/; else cp -a $TMP_DIR/. $APP_DIR/; fi",
                "rm -f /tmp/app.zip",

                "echo \"[3/8] Inject env & secrets\"",
                "command -v jq >/dev/null 2>&1 || sudo yum install -y jq || sudo apt-get install -y jq -y || true",
                "aws ssm get-parameter --name /fastapi/env_prod --with-decryption --query Parameter.Value --output text > .env",
                "mkdir -p $APP_DIR/credentials",
                "aws ssm get-parameter --name /fastapi/gcloud_sa_json --with-decryption --output json | jq -r \".Parameter.Value\" > $APP_DIR/credentials/gcloud-sa-key.json",
                "chmod 600 $APP_DIR/credentials/gcloud-sa-key.json",
                "chown ec2-user:ec2-user $APP_DIR/credentials/gcloud-sa-key.json",
                "mkdir -p $APP_DIR/secrets",
                "aws ssm get-parameter --name /fastapi/gpu_ssh_key --with-decryption --output text | jq -r \".Parameter.Value\" > $APP_DIR/secrets/$GPU_ID",
                "chmod 600 $APP_DIR/secrets/$GPU_ID",
                "chown ec2-user:ec2-user $APP_DIR/secrets/$GPU_ID",
                "aws ssm get-parameter --name /fastapi/gpu_ssh_pub --with-decryption --output text | jq -r \".Parameter.Value\" > $APP_DIR/secrets/$GPU_ID.pub",
                "chmod 600 $APP_DIR/secrets/$GPU_ID.pub",
                "chown ec2-user:ec2-user $APP_DIR/secrets/$GPU_ID.pub",

                "echo \"[4/7] Compose up (build on EC2)\"",
                "docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env down || true",
                "docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env up -d --build",

                "echo \"[5/7] Run migration(if any)\"",
                "docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env run --rm migration || true",

                "echo \"[6/7] Nginx config test & reload\"",
                "docker exec nginx_proxy nginx -t",
                "docker exec nginx_proxy nginx -s reload",

                "echo \"[7/7] Healthcheck\"",
                "for i in $(seq 1 20); do curl -fsS http://127.0.0.1:8000/health && break || sleep 3; done || echo \"healthcheck failed (non-blocking)\"",

                "docker image prune -f || true"
              ]
            }'
